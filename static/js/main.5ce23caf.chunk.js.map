{"version":3,"sources":["Components/Button.js","Components/GameScreen.js","Components/Score.js","App.js","reportWebVitals.js","index.js"],"names":["Button","name","winOrLose","onClick","GameScreen","winnerInfo","className","src","sprite","alt","taille","poid","typetwo","type","Score","score","App","state","pokeChoice","winner","getWinnerInfo","fetch","url","then","response","json","data","nom","forms","sprites","front_default","types","height","weight","setState","pokeapi","pokeall","results","i","rand","Math","floor","random","indexOf","push","reavel","this","Fragment","map","obj","id","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ce23caf.chunk.js","sourcesContent":["import React from 'react'\n\nconst Button = ({name, winOrLose}) => {\n    return (\n        <button onClick={() => winOrLose(name)}> {name} </button>\n    )\n}\n\nexport default Button","import React from 'react'\nimport '../App.css'\n\nconst GameScreen = ({winnerInfo}) => {\n\n    /* Verifie si il y a 1 seul ou plusieur Type sur ce pokémon */\n    const type = () => {\n       return winnerInfo.typetwo ? winnerInfo.type + ' and ' + winnerInfo.typetwo : winnerInfo.type \n    } \n\n\n    return (\n        <div className = \"Card\">\n            <img src={winnerInfo.sprite} alt=\"\" />\n            <p> HEIGHT : {winnerInfo.taille} M </p>\n            <p> WEIGHT : {winnerInfo.poid} KG </p>\n            <p> TYPE : {type()} </p>\n\n        </div>\n    )\n}\n\nexport default GameScreen","import React from 'react'\n\nconst Score = ({score}) => {\n    return (\n        <div className=\"letrou\">\n            <h3> SCORE : {score} </h3>\n        </div>\n    )\n}\n\nexport default Score","import './App.css';\nimport Button from './Components/Button';\nimport GameScreen from './Components/GameScreen';\nimport Score from './Components/Score';\nimport React, { Component } from 'react'\n\nclass App extends Component {\n\n  state = {\n    pokeChoice: [],\n    winner: {},\n    winnerInfo: {},\n    score:0\n  }\n\n  /*Récupère les information du pokémon gagnant et les sauvegarde dans le state*/ \n  getWinnerInfo = (winner) => {\n    fetch(winner.url)\n      .then(response => response.json())\n      .then((data) => { \n        const winnerInfo = {\n          nom: data.forms[0].name,\n          sprite: data.sprites.front_default,\n          type: data.types[0].type.name,\n          taille: data.height/10.0,\n          poid: data.weight/10.0,\n        }\n        /* Regle le bug du double type (Cannot find property type of Undefined) */\n        if (data.types[1]) winnerInfo['typetwo'] = data.types[1].type.name\n        \n        this.setState({winnerInfo})\n      })\n  }\n\n  /* Récupère les donnée de l'API et les sauvegarde dans le state*/\n  pokeapi = () => {\n    const randomizeAll = () => Math.floor(Math.random() * (150 - 0 + 1)) + 0\n    const randomize = () => Math.floor(Math.random() * (2 - 0 + 1)) + 0    \n    fetch('https://pokeapi.co/api/v2/pokemon?limit=151')\n      .then(response => response.json())\n      .then((data) => { \n        const pokeall = data.results\n        const pokeChoice = []\n        for (let i = 0 ; i < 3;) {\n          let rand = randomizeAll()\n          /* Evite d'avoir deux fois le meme nom de pokémon */\n          if (pokeChoice.indexOf(rand) === -1) {\n            i++\n            pokeChoice.push(pokeall[rand])\n          }\n        }\n        const winner = pokeChoice[randomize()]\n        this.getWinnerInfo(winner)\n        this.setState({pokeChoice})\n        this.setState({winner})\n      })\n\n  }\n\n  reavel = () => {\n\n  }\n\n  winOrLose = (name) => {\n    if (this.state.winner.name === name) {\n      let score = this.state.score\n      score += 1\n      this.setState({score})\n      this.reavel()\n      this.pokeapi()\n    } else {\n      let score = this.state.score\n      score -= 1\n      this.setState({score})\n      this.reavel()\n      this.pokeapi()\n    }\n  }\n\n  componentDidMount () {\n    this.pokeapi()\n   \n  }\n\n  render () {   \n    return (\n      <React.Fragment>\n        <div className = \"navbar\">\n          <h1 className=\"main\">WHO IS THAT POKEMON ?</h1>\n          <h1 className =\"sec\">WITP?</h1>\n        </div>\n        <div className = \"container\">\n          <Score\n          score = {this.state.score}></Score>\n          <GameScreen\n            winnerInfo = {this.state.winnerInfo}>\n          </GameScreen>\n          {/*Itere pour crée les boutons avec le choix des pokémons*/}\n          {this.state.pokeChoice.map((obj, id) => <Button winOrLose = {this.winOrLose} key = { id } name ={obj.name} ></Button>)}\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}